// Code generated by MockGen. DO NOT EDIT.
// Source: ../create/service.go

// Package mock_create is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	models "toggle/server/pkg/models"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateFlag mocks base method
func (m *MockService) CreateFlag(arg0 *models.Flag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFlag", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFlag indicates an expected call of CreateFlag
func (mr *MockServiceMockRecorder) CreateFlag(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFlag", reflect.TypeOf((*MockService)(nil).CreateFlag), arg0)
}

// CreateSegment mocks base method
func (m *MockService) CreateSegment(arg0 *models.Segment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSegment", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSegment indicates an expected call of CreateSegment
func (mr *MockServiceMockRecorder) CreateSegment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSegment", reflect.TypeOf((*MockService)(nil).CreateSegment), arg0)
}

// CreateUser mocks base method
func (m *MockService) CreateUser(arg0 *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser
func (mr *MockServiceMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockService)(nil).CreateUser), arg0)
}

// CreateAttributes mocks base method
func (m *MockService) CreateAttributes(arg0 *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAttributes", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAttributes indicates an expected call of CreateAttributes
func (mr *MockServiceMockRecorder) CreateAttributes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAttributes", reflect.TypeOf((*MockService)(nil).CreateAttributes), arg0)
}

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// InsertFlag mocks base method
func (m *MockRepository) InsertFlag(arg0 *models.Flag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertFlag", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertFlag indicates an expected call of InsertFlag
func (mr *MockRepositoryMockRecorder) InsertFlag(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertFlag", reflect.TypeOf((*MockRepository)(nil).InsertFlag), arg0)
}

// InsertSegment mocks base method
func (m *MockRepository) InsertSegment(arg0 *models.Segment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertSegment", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertSegment indicates an expected call of InsertSegment
func (mr *MockRepositoryMockRecorder) InsertSegment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertSegment", reflect.TypeOf((*MockRepository)(nil).InsertSegment), arg0)
}

// InsertUser mocks base method
func (m *MockRepository) InsertUser(arg0 *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUser indicates an expected call of InsertUser
func (mr *MockRepositoryMockRecorder) InsertUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockRepository)(nil).InsertUser), arg0)
}

// InsertAttributes mocks base method
func (m *MockRepository) InsertAttributes(arg0 []models.Attribute) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertAttributes", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertAttributes indicates an expected call of InsertAttributes
func (mr *MockRepositoryMockRecorder) InsertAttributes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAttributes", reflect.TypeOf((*MockRepository)(nil).InsertAttributes), arg0)
}
